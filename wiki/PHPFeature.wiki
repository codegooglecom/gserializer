#summary Requirements for the PHP serialization feature
#labels Featured,Phase-Requirements

= Introduction =
The PHP serialization feature is currently in the *requirements* phase. 

== Serialization Format ==
The serialization format for simple types will be:

||*Type*  ||*Serialized*                ||*Example*      ||
||NULL	  ||N;	                        ||N;             ||
||Integer ||i:$data;	                ||i:123;         ||
||Double  ||d:$data;	                ||d:1.23;        ||
||Float	  ||d:$data;	                ||d:1.23;        ||
||Boolean ||b:$bool_value;              ||b:1;           ||
||String  ||s:$str_length:"$data";	||s:5:"Hello"    ||
||Array	  ||a:$key_count:{$key;$data}	||a:1:{i:1;i:2}  ||
|| ||$data can be of any data type||||

=== Object Serialization ===

We need a bit more room to describe the way objects are serialized.
Take the following PHP\JS Object:

{{{
class TestClass {
    private   $id = 123;
    public    $publicId = 456;
    private   $name = "GSerializer";
    protected $_types = array('php', 'js', 'xml');
	
    public function getPublicId() {
        return $this->publicId;
    }
    private function getId() {
        return $this->id;
    }
    protected function getTypes() {
        return $this->_types;
    }
}
$s = new TestClass();
$ser = serialize($s);
var_dump($ser);
}}}

PHP serializes the string as: 

`O:9:"TestClass":4:{s:13:"�TestClass�id";i:123;s:8:"publicId";i:456;s:15:"�TestClass�name";s:11:"GSerializer";s:9:"�*�_types";a:3:{i:0;s:3:"php";i:1;s:2:"js";i:2;s:3:"xml";}}`

The format is:
`o:$class_name_len:$class_name:$member_len:{$value} ||o:10:"ExampleObj":2:{}`

== Concerns ==
There are a few initial concerns, for example, how to treat functions of an object in JavaScript as PHP has no such feature. A solution may be to wrap the function up in an instance variable with a consistent naming scheme, or to create another object out of it and again use a consistent naming scheme.

Ideas are welcome.